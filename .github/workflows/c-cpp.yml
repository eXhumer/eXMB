name: Build and Upload eXMB
on:
  push:
    branches: [ qt6-cmake ]
  pull_request:
    branches: [ qt6-cmake ]
jobs:
  win32-qt624-msvc2019_64-shared:
    runs-on: windows-2019
    steps:
    - name: Checkout project source code
      uses: actions/checkout@v2
    - name: Checkout project submodules
      run: git submodule update --init --recursive
    - name: Get Qt 6.2.4
      run: |
        git clone git://code.qt.io/qt/qt5.git ..\qt624 --branch=6.2.4
    - name: Initialize Qt repositories
      run: |
        cd ..\qt624
        perl init-repository --module-subset=qtbase,qtnetworkauth,qttools,qtwebsockets
    - name: Apply qtbase patch
      run: |
        cd ..\qt624\qtbase\
        Invoke-WebRequest -Uri "https://github.com/eXhumer/qtbase-exmb/commit/c636844e2f6cd55890234989136cddbdf0b435f3.patch" -OutFile .\qtbase.patch
        git apply .\qtbase.patch
        rm .\qtbase.patch
    - name: Get OpenSSL 1.1.1n
      run: |
        git clone https://github.com/openssl/openssl.git ../openssl --origin=openssl
        cd ../openssl
        git checkout OpenSSL_1_1_1n
    - name: Get NASM 2.15.05
      run: |
        $NASM_URL = "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip"
        Invoke-WebRequest -Uri $NASM_URL -OutFile ../NASM.zip
        cd ../
        Expand-Archive NASM.zip
    - name: Configure, Build & Install OpenSSL (NASM 2.15.05 | MSVC2019-x64)
      run: |
        ${env:NASM_PATH} = (Resolve-Path ../NASM/nasm-2.15.05/).Path
        ${env:PATH} += ";${env:NASM_PATH}"
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        cd ..\openssl\
        mkdir ..\OpenSSL-1.1.1n\ && mkdir ..\OpenSSL-Dir\
        ${env:OPENSSL_DIR} = (Resolve-Path ..\OpenSSL-Dir).Path
        ${env:OPENSSL_PREFIX} = (Resolve-Path ..\OpenSSL-1.1.1n).Path
        perl Configure --openssldir=${env:OPENSSL_DIR} --prefix=${env:OPENSSL_PREFIX} VC-WIN64A
        nmake
        nmake install
    - name: Configure, Build & Install Qt 6.2.4 (MSVC2019-x64)
      run: |
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        mkdir ..\qt624-shared && cd ..\qt624-shared
        ..\qt624\configure.bat -prefix ..\Qt\6.2.4\msvc2019_64 -platform win32-msvc -release -shared
        cmake --build . --parallel
        cmake --install .
    - name: Configure, Build & Install eXMB (Qt 6.2.4 | OpenSSL 1.1.1n | MSVC2019-x64)
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
      run: |
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        ${env:CMAKE_PREFIX_PATH} = (Resolve-Path ..\Qt\6.2.4\msvc2019_64).Path
        cmake -B ..\eXMB-build -S . -DREDDIT_CLIENT_ID="${env:REDDIT_CLIENT_ID}" -DCMAKE_INSTALL_PREFIX="..\eXMB-ReleaseOut" -DCMAKE_SYSTEM_VERSION="10.0.22000.0" -DOPENSSL_ROOT_DIR="..\OpenSSL-1.1.1n"
        cmake --build ..\eXMB-build --target ALL_BUILD --config Release --parallel
        cmake --install ..\eXMB-build
        echo "EXMB_RELEASE_PATH=${(Resolve-Path ..\eXMB-ReleaseOut).Path}" >> ${env:GITHUB_ENV}
    - name: Deploy Qt6 shared libraries with eXMB
      run: |
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        & ..\Qt\6.2.4\msvc2019_64\bin\windeployqt.exe --release --no-translation --no-compiler-runtime ..\eXMB-ReleaseOut\bin\eXMB.exe
    - name: Deploy OpenSSL shared libraries with eXMB
      run: |
        cp ..\OpenSSL-1.1.1n\bin\libcrypto-1_1-x64.dll ..\eXMB-ReleaseOut\bin
        cp ..\OpenSSL-1.1.1n\bin\libssl-1_1-x64.dll ..\eXMB-ReleaseOut\bin
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: win32-qt624-msvc2019_64-shared
        path: ${{ env.EXMB_RELEASE_PATH }}
  win32-qt624-msvc2019_64-static:
    runs-on: windows-2019
    steps:
    - name: Checkout project source code
      uses: actions/checkout@v2
    - name: Checkout project submodules
      run: git submodule update --init --recursive
    - name: Get Qt 6.2.4
      run: |
        git clone git://code.qt.io/qt/qt5.git ..\qt624 --branch=6.2.4
    - name: Initialize Qt repositories
      run: |
        cd ..\qt624
        perl init-repository --module-subset=qtbase,qtnetworkauth,qttools,qtwebsockets
    - name: Apply qtbase patch
      run: |
        cd ..\qt624\qtbase\
        Invoke-WebRequest -Uri "https://github.com/eXhumer/qtbase-exmb/commit/c636844e2f6cd55890234989136cddbdf0b435f3.patch" -OutFile .\qtbase.patch
        git apply .\qtbase.patch
        rm .\qtbase.patch
    - name: Get OpenSSL 1.1.1n
      run: |
        git clone https://github.com/openssl/openssl.git ../openssl --origin=openssl
        cd ../openssl
        git checkout OpenSSL_1_1_1n
    - name: Get NASM 2.15.05
      run: |
        $NASM_URL = "https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-win64.zip"
        Invoke-WebRequest -Uri $NASM_URL -OutFile ../NASM.zip
        cd ../
        Expand-Archive NASM.zip
    - name: Configure, Build & Install OpenSSL (NASM 2.15.05 | MSVC2019-x64)
      run: |
        ${env:NASM_PATH} = (Resolve-Path ../NASM/nasm-2.15.05/).Path
        ${env:PATH} += ";${env:NASM_PATH}"
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        cd ..\openssl\
        mkdir ..\OpenSSL-1.1.1n\ && mkdir ..\OpenSSL-Dir\
        ${env:OPENSSL_DIR} = (Resolve-Path ..\OpenSSL-Dir).Path
        ${env:OPENSSL_PREFIX} = (Resolve-Path ..\OpenSSL-1.1.1n).Path
        perl Configure --openssldir=${env:OPENSSL_DIR} --prefix=${env:OPENSSL_PREFIX} VC-WIN64A
        nmake
        nmake install
    - name: Configure, Build & Install Qt 6.2.4 (MSVC2019-x64)
      run: |
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        mkdir ..\qt624-static && cd ..\qt624-static
        ..\qt624\configure.bat -prefix ..\Qt\6.2.4\msvc2019_64 -platform win32-msvc -release -static
        cmake --build . --parallel
        cmake --install .
    - name: Configure, Build & Install eXMB (Qt 6.2.4 | OpenSSL 1.1.1n | MSVC2019-x64)
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
      run: |
        $VSWHERE_PATH = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        $DEV_CMD_ARGS = "-arch=amd64", "-host_arch=amd64", "-no_logo"
        $MSVC2019_VSWHERE_INSTALL_PATH_ARGS = "-products", "*", "-requires", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", "-version", "[16.0,17.0)", "-property", "installationPath"
        $MSVC2019_INSTALL_PATH = & $VSWHERE_PATH $MSVC2019_VSWHERE_INSTALL_PATH_ARGS
        $MSVC2019_DEVSHELL_PATH = "$MSVC2019_INSTALL_PATH\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Import-Module $MSVC2019_DEVSHELL_PATH
        Enter-VsDevShell -VsInstallPath "$MSVC2019_INSTALL_PATH" -DevCmdArguments ($DEV_CMD_ARGS -join " ")
        ${env:CMAKE_PREFIX_PATH} = (Resolve-Path ..\Qt\6.2.4\msvc2019_64).Path
        cmake -B ..\eXMB-build -S . -DREDDIT_CLIENT_ID="${env:REDDIT_CLIENT_ID}" -DCMAKE_INSTALL_PREFIX="..\eXMB-ReleaseOut" -DCMAKE_SYSTEM_VERSION="10.0.22000.0" -DOPENSSL_ROOT_DIR="..\OpenSSL-1.1.1n"
        cmake --build ..\eXMB-build --target ALL_BUILD --config Release --parallel
        cmake --install ..\eXMB-build
        echo "EXMB_RELEASE_PATH=${(Resolve-Path ..\eXMB-ReleaseOut).Path}" >> ${env:GITHUB_ENV}
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: win32-qt624-msvc2019_64-static
        path: ${{ env.EXMB_RELEASE_PATH }}
  ubuntu-qt624-gcc_64-shared:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout project source code
      uses: actions/checkout@v2
    - name: Checkout project submodules
      run: git submodule update --init --recursive
    - name: Install Qt 6.2.4 build requirements
      run: |
        sudo apt-get update && sudo apt-get install build-essential libclang-11-dev libgl1-mesa-dev libssl-dev libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev ninja-build
    - name: Get Qt 6.2.4 Source Code
      run: |
        cd ../
        git clone git://code.qt.io/qt/qt5.git qt624 --branch=6.2.4
        cd ./qt624
        perl init-repository --module-subset=qtbase,qtnetworkauth,qttools,qtwebsockets
        cd ./qtbase
        wget "https://github.com/eXhumer/qtbase-exmb/commit/c636844e2f6cd55890234989136cddbdf0b435f3.patch"
        git apply c636844e2f6cd55890234989136cddbdf0b435f3.patch
        rm c636844e2f6cd55890234989136cddbdf0b435f3.patch
    - name: Build Qt 6.2.4
      run: |
        mkdir ../qt624-shared
        cd ../qt624-shared
        ../qt624/configure -prefix ../Qt/6.2.4/gcc_64 -platform linux-g++ -release -shared
        cmake --build . --parallel
        cmake --install .
    - name: Build eXMB
      env:
        REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
      run: |
        CMAKE_PREFIX_PATH=../Qt/6.2.4/gcc_64 cmake -B ../eXMB-build -S . -DREDDIT_CLIENT_ID="$REDDIT_CLIENT_ID" -DCMAKE_INSTALL_PREFIX="../eXMB-ReleaseOut" -DCMAKE_SYSTEM_VERSION="10.0.22000.0"
        cmake --build ../eXMB-build --target eXMB StreamableUploader --config Release
        cmake --install ../eXMB-build
        echo "EXMB_RELEASE_PATH=$(cd ../eXMB-ReleaseOut; pwd)" >> $GITHUB_ENV
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-qt624-gcc_64-shared
        path: ${{ env.EXMB_RELEASE_PATH }}
